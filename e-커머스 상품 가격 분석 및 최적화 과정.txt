**커머스 강의 5일차

2022-10-24

***함수(function)


def 함수이름(*매개변수):
<수행할 문장>
...



def add(a,b):
return a+b


String, List, Dict, Set, 




def add_and_mul(a,b):
return a+b, a*b

result = add_and_mul(3,4)
result = (7,12)

result1, result2 = add_and_mul(3, 4)


-------------------------------------------

a = 1
def vartest(a):
a = a +1
vartest(a)
print(a)



a = a +1 <--의 맨앞에 a 는 함수안에서 선언된 a, 함수안에서 빠져나오면 소멸되는 a이고, 뒤에 a와 다른것이다.


1. return 사용하기

# vartest_return.py

a = 1

def vartest(a):
a = a +1
return a

a = vartest(a)
print(a)



2. global 명령어 사용하기

# vartest_global.py

a = 1

def vartest():
global a

a = a+1

vartest()
print(a)


-------------------------------------------

** 람다식 : 함수 안에서 함수 밖의 변수를 변경하는 방법 / lambda 매개변수1, 매개변수2, ... : 매개변수를 이용한 표현식

>>> add = lambda a, b: a+b
>>> result = add(3, 4)
>>> print(result)
7


>>> def add(a, b):
...     return a+b

>>> result = add(3, 4)
>>> print(result)
7



*** 사용자 입력(input)

** input의 사용

>>> a = input()
Life is too short, you need python
>>> a
'Life is too short, you need python'
>>> 


** input("질문 내용")

>>> number = input("숫자를 입력하세요: ")
숫자를 입력하세요;

>>> number = input("숫자를 입력하세요: ")
숫자를 입력하세요: 3

>>> print(number)
3

>>> 


**출력

-------------------------------------------


**파일 읽고 쓰기 - 파일 생성하기 / 프로그램의 외부에 저장된 파일을 읽는 여러 가지 방법

f = open("새파일.txt", 'w')
f.close()

파일 객체 = open(파일이름, 파일열기모드)

r

w

c

----------
# write

f = open("/새파일.txt", 'w')
for i in renge(1, 11):
	data = "%d번째 줄입니다.|n" % i
	f.write(data)

f.close()


----------

for i in range(1, 11):
	data = "%d번째 줄입니다.|n" % i
	print(data)


-------------------------------------------


** readline() 함수 사용하기

# readline_test.py
f = open("/새파일.txt", 'r')
line = f.readline()
print(line)
f.close()


1번째 줄입니다.



while 1:
	data = input()
	if not data: break
	print(data)



---
** readlines() 함수 사용하기

f = open("/새파일.txt", 'r')
line = f.readlines()
for line in lines:
	print(line)
f.close()


---
** read 함수 사용하기

f = open("/새파일.txt", 'r')
data = f.read()
print(data)
f.close()


---
파일에 새로운 내용 추가하기

#adddata.py

f = open("/새파일.txt",'a')
for i in range(11, 20):
	data = "%d번째 줄입니다.|n" % i
	f.write(data)
f.close()
-------------------------------------------

wite문과 함께 사용하기

f = open("foo.txt", 'w')
f.write("Life is too short, you need python")
f.close()


with open("foo.txt", "w") as f:
	f.write("Life is too short, you need python")


-------------------------------------------
파이썬 함수에 대한 기본 end--
-------------------------------------------
*** 판다스(PANDAS) : 데이터를 수집하는데 최적화되어있다.

**시리즈(1차원- : 딕셔너리와 닮아있다.

딕셔너리 -> 시리즈 변환 : PANDAS.SERIES(딕셔너리)




**데이터프레임(2차원)

라는 객체를 가지고있다

1. 서로다른 여러 데이터를 공통의 포멧으로 정리하고자함

데이터주소INDEX - KEY - 데이터값VALUE

import pandas as pd

dict_data = {'a':1, 'b':2, 'c':3}

sr = pd.Series(dict_data)
print(type(sr))

print('|n')

print(sr)

-------------------

인덱스 배열 : Series객체.index
데이터값 배열 : Series객체.value

-------------------

**list를 Series로 변환


import pandas as pd

list_data = ['2019-01-02', 3.14, 'ABC', 100, True]
sr = pd.Series(list_data)
print(sr)


idx = sr.index
val = sr.values
print(idx, '|n', val)

-------------------

** 튜플 -> Series로 변환

1. 

import pandas as pd

tup_data = ('은기', '2022-10-24', '여', True)
sr = pd.Series(tup_data, index = ['이름', '생년월일', '성별', '학생여부'])
print(sr)

print(sr[0])
print(sr['이름'])

print(sr[[1, 2]])
print('|n')
print(sr[['생년월일','성별']])


-----
2.

print(sr[1:])
print('|n')
print(sr['생년월일' : '학생여부])

-------------------------------------------

** 데이터 프레임

시리즈를 모아서 데이터 프레임으로 구성한것이고
행인덱스 열인덱스로 따로 구성된다.

열 : 속성이나 범주를 나타내며 변수로서 많이 쓰인다.
행 : 개별관측대상들의 모임/ 관측값.


import pandas as pd

dict_data = {'A':[1,2,3], 'B':[4,5,6], 'C':[7,8,9], 'd':[10,11,12], 'e':[13,14,15]}

df = pd.DataFrame(dict_data)
print(type(df))
print('|n')
print(df)

셔너리 값을 가지고 데이터프레임을 생성할때 파라미터를 넣게되면(dict_data)가 데이터프레임이 되는것이다.

----

import pandas as pd

# 행 인덱스/열 이름 지정하여 데이터프레임 만들기

df = pd.DataFrame([[15, '남', '덕영중'], [17, '여', '수리중']],
			index=['준서', '예은'],
			columns=['나이', '성별', '학교'])

# 행 인덱스, 열 이름 확인하기

print(df)				#데이터프레임
print('|n')
print(df.index)			#행 인덱스
print('|n')
print(df.columns)		#열 이름
 

-----

* 행 인덱스 변경 : DataFrame 객체.rename(index={기존 인덱스:새 인덱스, ... })
* 열 이름 변경 : DataFrame 객체.rename(columns={기존 이름:새 이름, ...})

import pandas as pd

# 행 인덱스/열 이름 지정하여 데이터 프레임 만들기

df = pd.DataFrame([[15, '남', '덕영중'],[17, '여', '수리중']],
			index=['준서', '예은'],
			columns=['나이', '성별', '학교'])

print(df)
print("|n")

# 열 이름 중, '나이'를 '연령'으로, '성별'을 '남녀'로, '학교'를 '소속'으로 바꾸기

df.rename(columns={'나이':'연령', '성별':'남녀', '학교':'소속'}, inplace=True)

# df의 행 인덱스 중에서, '준서'를 '학생1'로, '예은'을 '학생2'로 바꾸기
df.rename(index={'준서':'학생1', '예은':'학생2' }, inplace=True)


#df 출력(변경 후)
print(df)


------

* 행삭제: DataFrame 객체.drop(''),axis=0
new_df = old_df.drop(10, axis=0)


* 열삭제:DataFrame 객체.drop(''),axis=1
iris.drop('variety', axis=1) 또는 iris.drop('variety', axis = 'columns')




























